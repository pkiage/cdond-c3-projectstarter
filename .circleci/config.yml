# Paul Kiage
# Udacity Cloud DevOps Engineering Nanodegree
# Project 3

# Docker Image Selection Options
## NodeJS: https://hub.docker.com/_/node
## AWS: https://hub.docker.com/r/amazon/aws-cli

# VERSION
version: 2.1

# ORBS
orbs:
  # https://circleci.com/developer/orbs/orb/circleci/slack
  slack: circleci/slack@4.10.1

# COMMANDS
commands:
  # Slack Notifications
  ## https://github.com/CircleCI-Public/slack-orb/wiki/Setup
  ## https://circleci.com/developer/orbs/orb/circleci/slack
  # Custom alert messages
  custom-failure-alert-message:
    description: Custom failure alert messages to the UdaPeople dev team
    parameters:
      custom_message:
        type: string
    steps:
      - slack/notify:
          event: fail # options: always, pass, fail
          # Tip:
          ## For template JSON formatting do it in a JSON file e.g. project/circleci-stack-customFailAlert.json
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Job Failed. :x:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: ${CIRCLE_JOB}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Custom Failure Message: <<parameters.custom_message>>"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  slack-success-notification:
    description: Slack notification on job success
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  # Stack commands
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "${CIRCLE_WORKFLOW_ID}"
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # Using kvdb.io
            SUCCESS=$(curl --insecure  https://kvdb.io/HmnnciQC9qtfnJNaBpePv3/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if(( $SUCCESS==1 ));
            then
             cd ~/project/backend
             npm install
             npm run migration:revert
            fi

# JOBS
jobs:
  # A. Deploying Trustworthy Software
  # A1. Build Phase
  # Check for syntax errors and unintentional typos
  build-frontend:
    docker:
      # Compatible with NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend (check for syntax errors and unintentional typos)
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # Custom failure reason message
      - custom-failure-alert-message:
          custom_message: "Please fix frontend code syntax errors or unintentional typos"
      # Success notification
      # - slack-success-notification

  build-backend:
    docker:
      # Compatible with NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
          # Job
          name: Build backend (check for syntax errors and unintentional typos)
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # Custom failure reason message
      - custom-failure-alert-message:
          custom_message: "Please fix backend code syntax errors or unintentional typos"
      # Success notification
      # - slack-success-notification

  # A2. Test Phase
  # Run unit tests
  test-frontend:
    docker:
      # Compatible with NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      # Custom failure reason message
      - custom-failure-alert-message:
          custom_message: "Please fix failing frontend code unit tests"
      # Success notification
      # - slack-success-notification

  test-backend:
    docker:
      # Compatible with NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      # Custom failure reason message
      - custom-failure-alert-message:
          custom_message: "Please fix failing backend code unit tests"
      # Success notification
      # - slack-success-notification

  # A3. Analyze Phase
  # Check for known security vulnerabilities
  scan-frontend:
    docker:
      # Compatible with NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical
      # Custom failure reason message
      - custom-failure-alert-message:
          custom_message: "Please address frontend packages security vulnerabilities"
      # Success notification
      # - slack-success-notification

  scan-backend:
    docker:
      # Compatible with NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      # Custom failure reason message
      - custom-failure-alert-message:
          custom_message: "Please address backend packages security vulnerabilities"
      # Success notification
      # - slack-success-notification

  # B Infrastructure Phase

  # Setup - AWS

  # KeyPair
  # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair

  # IAM user for programmatic access
  # Configure AWS CLI to use generated keys
  # https://serverless-stack.com/chapters/create-an-iam-user.html

  # PostgreSQL in RDS with public accessibility
  # https://aws.amazon.com/getting-started/hands-on/create-connect-postgresql-db/
  # As long as you marked "Public Accessibility" as "yes", you won't need to worry about VPC settings or security groups
  # Take note of connection details:
  ## Endpoint (Hostname): xxxx.aws_region_.rds.amazonaws.com
  ## Instance identifier:
  ## Database name postgres (default)
  ## Password: xxxx
  ## Port: 5432

  # Setup - CloudFront Distribution Primer

  # For switch from old infra to new infra (Blue Green Deployment strategy)
  # to work need to do a few things manually

  # create public S3 bucket with name udapeople-random_string
  # https://www.simplified.guide/aws/s3/create-public-bucket

  # manually run project/.circleci/files/cloudfront.yml
  # from root of project run the following command
  # sh setup-cfd-primer.sh S3_bucket_name
  # This creates:
  ## CloudFront Distribution connection to existing S3 bucket
  ## CloudFrontOriginAccessIdentity (CloudFront OAI)
  # once initial stack is created subsequent executions
  # will modify the same CloudFront distribution
  # to make blue-to-grean switch without fail

  # Setup - CircleCI

  # Add SSH KeyPair from EC2 to additional SSH keys
  # Obtain fingerprint
  # https://circleci.com/docs/add-ssh-key

  # Add environment variables
  # AWS_ACCESS_KEAWS_ACCESS_KEY_ID=(from IAM user with programmatic access)
  # AWS_SECRET_ACCESS_KEY= (from IAM user with programmatic access)
  # AWS_DEFAULT_REGION=(your default region in aws)
  # TYPEORM_CONNECTION=postgres
  # TYPEORM_MIGRATIONS_DIR=./src/migrations
  # TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
  # TYPEORM_MIGRATIONS=./src/migrations/*.ts
  # TYPEORM_HOST={your postgres database hostname in RDS}
  # TYPEORM_PORT=5432 (or the port from RDS if itâ€™s different)
  # TYPEORM_USERNAME={your postgres database username in RDS}
  # TYPEORM_PASSWORD={your postgres database password in RDS}
  # TYPEORM_DATABASE=postgres {or your postgres database name in RDS}Y_ID
  # https://circleci.com/docs/settings

  # B1. Create Infrastructure (1.a)
  # Create infrastructure using provided CloudFormation Templates in dir project/.circleci/files
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip

      # Create a stack udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      # Using project/.circleci/files/backend.yml
      # Ensure correct values in project/.circleci/files/backend.yml (AMI ID, KeyPair name) applicable to AWS account/region

      # Default project/.circleci/files/backend.yml
      ## SecurityGroup (allow port 22 and port 3030)
      ## EC2 instance and attach the SecurityGroup

      # AWS Console Check
      ## EC2 Instance has port 3030 opened up to public traffic

      # Tips:
      ## Read project/backend/README.md
      ## For backend environment variables create and use project/backend/.env

      - run:
          name: Ensure backend infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople

      # Create a stack udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      # Using project/.circleci/files/frontend.yml

      # Default project/.circleci/files/frontend.yml
      ## Create a new S3 bucket
      ## Create a Bucket policy and attach to the S3 bucket

      # Tips:
      ## Read project/backend/README.md
      ## When deploying to a folder instead of the root on a web server,
      ## you need paths to resources to be relative (ex: ./scripts instead of /scripts).

      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople

      # Fetch public IP of EC2 instance specified in project/.circleci/files/backend.yml
      # Append public IP to .circleci/ansible/inventory.txt

      # Persist .circleci/ansible/inventory.txt since used in future jobs e.g.
      ## configure-infrastructure
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Custom failure reason message
      - custom-failure-alert-message:
          custom_message:
            "Please ensure i) appropriate stack name with workflow id,
            ii) correct CircleCi workflow id referencing,
            iii) correct values in project/.circleci/files/backend.yml (AMI ID, KeyPair name) applicable to AWS account/region"
      # Success notification
      # - slack-success-notification

  # B2. Configure Infrastructure (1.b)
  # Set up EC2 instance to run as backend
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      # Gives ansible access to the EC2 instance via SSH
      - add_ssh_keys:
          fingerprints:
            - "8d:61:ff:ad:be:1e:e5:4d:fa:01:62:cf:2b:19:dc:15" #REPLACE_WITH_APPLICABLE
      # attach workspace
      # So have access to files needed e.g. inventory
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Install dependencies for the next step, such as tar, gzip, ansible, or awscli.
            # no-cache to keep container small
            apk add --update --no-cache tar gzip ansible aws-cli 
            pip install awscli

      # Finish Ansible playbook (project/.circleci/ansible/configure-server.yml) before configuring server
      # Playbook will be run against EC2 instance that has been programmatically created in CircleCi job deploy-infrastructure

      # Tips:
      ## Read project/.circleci/ansible/roles/configure-server/tasks/readme.md
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Custom failure reason message
      - custom-failure-alert-message:
          custom_message: "Please ensure i) appropriate docker image,
            ..."
      # Success notification
      # - slack-success-notification

      # Tip:
      ## Check your CloudFormation console and manually delete the unnecessary stacks which are no longer required.

  # C Deploy Phase
  # C1. Database Migrations (2.a)
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar
            apk add --update --no-cache gzip 
            apk add --update --no-cache nodejs
            apk add --update --no-cache npm
            apk add --update --no-cache aws-cli
            apk add --update --no-cache curl
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run build
            npm run migrations >> migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # In local terminal run the following:
              # curl -d 'email=your_email_address' https://kvdb.io
              # After running the command above youo'll get a bucket ID xxxxxxxxxxxxxxxxxxxxxx
              # Verify your email ID at your_email_address
              # If you are using kvdb.io, generate the bucket ID "xxxxxxxxxxxxxxxxxxxxxx" in your local terminal first
              #REPLACE_WITH_APPLICABLE
              curl https://kvdb.io/HmnnciQC9qtfnJNaBpePv3/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' 
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            # Python, Ansible, Node, NPM, and AWS CLI.
            # Prefer to do these installations in multiple steps
            apk add --update --no-cache tar
            apk add --update --no-cache gzip 
            apk add --update --no-cache curl
            apk add --update --no-cache ansible
            apk add --update --no-cache nodejs
            apk add --update --no-cache npm
            apk add --update --no-cache aws-cli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: "8d:61:ff:ad:be:1e:e5:4d:fa:01:62:cf:2b:19:dc:15" #REPLACE_WITH_APPLICABLE
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            # Install any necessary dependencies, such as tar, gzip, ansible, nodejs, and npm
            apk add --update --no-cache tar
            apk add --update --no-cache gzip 
            apk add --update --no-cache curl
            apk add --update --no-cache ansible
            apk add --update --no-cache nodejs
            apk add --update --no-cache npm
            apk add --update --no-cache aws-cli
            apk add --update --no-cache git
            apk add --update --no-cache tree
            apk add --update --no-cache openssh # auth
            apk add --update --no-cache rsync #to move file
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm install
            npm run build

            tree -aCf

            cd ..

            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .

            # handle artifact location
            ## make parent directory
            mkdir  -p ~/project/.circleci/ansible/roles/deploy/files/

            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cp ~/project/backend/.env .circleci/ansible/roles/deploy/files/backend.env


            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is ------- \n"
            cat inventory.txt
            # To see the full traceback, use -vvv
            # Verbose
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            # Install dependencies like curl, nodejs, npm, or awscli.
            # no-cache to keep container small
            apk add --update --no-cache curl 
            apk add --update --no-cache tar 
            apk add --update --no-cache gzip 
            apk add --update --no-cache nodejs
            apk add --update --no-cache npm
            apk add --update --no-cache aws-cli 
            pip install awscli
            apk add --update --no-cache openssh
            apk add --update --no-cache rsync #to move files

      - run:
          name: Backend smoke test.
          command: |
            # your code here

            # Get backend url

            printf "=%.0s"  $(seq 1 10)
            echo -e "\n"

            export BACKEND_IP=$(aws ec2 describe-instances \
            --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --output text)

            echo "BACKEND_IP: ${BACKEND_IP}"

            echo -e "\n"
            printf "=%.0s"  $(seq 1 10)


            # Fetch and prepare the BACKEND_IP env var

            printf "=%.0s"  $(seq 1 10)
            echo -e "\n"

            export API_URL="http://${BACKEND_IP}:3030"

            echo "API_URL: ${API_URL}"

            echo -e "\n"
            printf "=%.0s"  $(seq 1 10)

            # No errors mean a successful test
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            # Form the front-end url using the workflow id and your AWS region.
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            echo ${URL}
            # Check the front-end to make sure it includes a word or two that proves it is working properly.
            # No errors mean a successful test
            if curl -s ${URL} | grep "Welcome"
            then
                return 0
            else
                return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache curl 
            apk add --update --no-cache tar 
            apk add --update --no-cache gzip 
            apk add --update --no-cache aws-cli 
            pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

# WORKFLOW
workflows:
  default:
    jobs:
      # A. Deploying Trustworthy Software
      # A1. Build Phase
      # Check for syntax errors and unintentional typos
      - build-frontend
      - build-backend

      # A2. Test Phase
      # Run unit tests
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]

      # A3. Analyze Phase
      # Check for known security vulnerabilities
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # Make sure you only run deployment-related jobs on commits to the master branch
          # SCREENSHOT10
          filters:
            branches:
              only: [master, features-defaultInfra]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
